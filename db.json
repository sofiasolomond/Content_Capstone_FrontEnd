{
  "users":[
    {"Id": 1,
     "username" : "Akshay1999",
     "email": "Akshay1999@gmail.com",
     "Password": "Akshay123",
     "Name" : "Akshay ",
     "Bio": "PhD in Artificial Intelligence",
     "Image": "1_profile.jpg",
     "Interests" : [
      {
        "topic" : "Sports"
      },
      {
        "topic" : "Entertainment"
      },
      {
        "topic" : "Politics"
      }
     ]

    },
    {"id": 2,
     "username": "riaj@gmail.com",
     "password": "riaj123",
     "Name" : "Riaj",
     "Bio": "Medai Content SPecialist",
     "Image": "2_profile.jpg",
     "Interests" : [
      {
        "topic" : "Entertainment"
      },
      {
        "topic" : "Politics"
      }
     ]

    },
    {"id": 3,
     "username": "akash@gmail.com",
     "password": "akash123",
     "Name" : "Akash",
     "Bio": "Software Architect",
     "Image": "3_profile.jpg",
     "Interests" : [
      {
        "topic" : "Information Technology"
      },
      {
        "topic" : "Entertainment"
      },
      {
        "topic" : "Politics"
      }
     ]

    },
    {"id": 4,
     "username": "sophia@gmail.com",
     "password": "sophia23",
     "Name" : "Nikhil",
     "Bio": "Cloud Architect",
     "Image": "4_profile.jpg",
     "Interests" : [
      {
        "topic" : "Medical"
      },
      {
        "topic" : "Entertainment"
      },
      {
        "topic" : "Movies"
      }
     ]

    },
    {"id": 5,
     "username": "shyam@gmail.com",
     "password": "shyam123",
     "Name" : "Nikhil",
     "Bio": "PhD in Neuro Science",
     "Image": "5_profile.jpg",
     "Interests" : [
      {
        "topic" : "Medical"
      },
      {
        "topic" : "Health"
      }
     ]

    }
],
  "recommended-articles": [
    {
      "id": 1,
      "title": "5 Javascript Clean Coding Patterns To Enhance your Code",
      "date": "03-May-2022",
      "category": "Reactjs",
      "ratings": "4.7",
      "image": "javascript.jpg",
      "duration": "5 min",
      "storyline": "Writing good reusable code can be difficult sometimes. Sometimes we may learn to code in different languages and stick to some limitations or patterns that make sense in that context.\n\nAlthough there is no right or wrong in coding without context, there are some simple ways of writing code that are more generic and can be applied to a lot of contexts, and create more readable, maintainable, and predictable code. Here are some of them:\n\n<b>1. Removing else’s from conditional handling</b>\nEver had a code structure like this, where you have two conditions and then have to handle different codes for each of them:\nWell, there’s a different way of dealing with this scenario, that can make things more simple to read.\nGenerally, you can always work on removing the ‘elses’ from your code. This makes your code easier to read and maintain. Also, if in this scenario, one condition is dependent on the other, the code can be further simplified, by removing the second if.\n\n<b>2. More declarative code with built-in functions</b>\n\nLet’s say you have an array of numbers and you want to sort them. A common implementation would be the following:\nThe implementation works, and sometimes you want to build your own implementations, however, in a simple scenario, you might want to use built-in functions for some reasons:\n\nThey make the code smaller, and smaller code tends to be more maintainable (not always true though);\nThey already use implementations that are more worked on, so can be faster, more secure, and known by other developers;\nThis way, using the array method sort from javascript ES6 the code can be greatly simplified and also improved the speed for bigger arrays.",
      "author": "Daniel Guedes"
    },
    {
      "id": 2,
      "title": "Indian Premier League",
      "date": "26-MAY-2022",
      "category": "Sports",
      "ratings": "4.4",
      "image": "ipl.jpg",
      "duration": "5 min",
      "storyline": "Indian Premier League (IPL), Indian professional Twenty20 (T20) cricket league established in 2008. The league, which is based on a round-robin group and knockout format, \nhas teams in major Indian cities.\n\nThe brainchild of the Board of Control for Cricket in India (BCCI), the IPL has developed into the most lucrative and most popular outlet for the game of cricket. \nMatches generally begin in late afternoon or evening so that at least a portion of them are played under floodlights at night to maximize the television audience for \nworldwide broadcasts. Initially, league matches were played on a home-and-away basis between all teams, but, with the planned expansion to 10 clubs (divided into two groups of five) \nin 2011, that format changed so that matches between some teams would be limited to a single encounter. The top four teams contest three play-off matches, \nwith one losing team being given a second chance to reach the final, a wrinkle aimed at maximizing potential television revenue. \nThe play-off portion of the tournament involves the four teams that finished at the top of the tables in a series of knockout games that allows one team that lost \nits first-round game a second chance to advance to the final match.\n\nImmensely popular in England, Australia, India, and many other British Commonwealth countries, the sport of cricket is a way of life for many people. \nThought to have originated as far back as the 13th century, cricket has a long history and a literacy all its own. This quiz highlights some of the more obscure and humorous \naspects of a game that is notoriously difficult to explain to the uninitiated. Test your knowledge and see how much you know about this historic sport.\nWith the advent of the IPL, almost overnight the world’s best cricketers—who had seldom made the kind of money earned by their counterparts in other professional \nsports—became millionaires. The owners of the IPL franchises, who included major companies, Bollywood film stars, and media moguls, bid for the best players in auctions \norganized by the league. At the outset of the IPL, the well-financed Mumbai Indians had the league’s biggest payroll, more than $100 million. \nIt cost the Chennai Super Kings $1.5 million to secure the services of Mahendra Dhoni in the initial auction for the 2008 season and the Kolkata Knight Riders $2.4 million \nto sign Gautam Gambhir, the opening batsman for the Indian national team, in the bidding for the 2011 season.\n\nThe eight founding franchises were the Mumbai Indians, the Chennai Super Kings, the Royal Challengers Bangalore, the Deccan Chargers (based in Hyderabad), \nthe Delhi Daredevils, the Punjab XI Kings (Mohali), the Kolkata Knight Riders, and the Rajasthan Royals (Jaipur). In late 2010 two franchises, Rajasthan and Punjab, \nwere expelled from the league by the BCCI for breeches of ownership policy, but they were later reinstated in time for the 2011 tournament.\nTwo new franchises, the Pune Warriors India and the Kochi Tuskers Kerala, joined the IPL for the 2011 tournament. The Kochi club played just one year before the BCCI terminated \nits contract. In 2013 the Deccan Chargers were replaced in the IPL by the Sunrisers Hyderabad.\n\nThe first tournament, held over 44 days in 2008, was won by the Rajasthan Royals, one of the smaller-market franchises, captained by Shane Warne, \nthe great Australian bowler. In the wake of the IPL’s success, other cricketing countries scrambled to grab some of the riches by forming their own domestic T20 leagues.",
      "author": " Andrew Longmore"
    },
    {
      "id": 3,
      "title": "React Hooks are bad for your code. Here’s why!",
      "date": "25-MAY-2022",
      "category": "Reactjs",
      "ratings": "4.4",
      "image": "hooksarebad.jpg",
      "duration": "8 min",
      "storyline": "I’ve recently developed a dislike for hooks after trying to refactor some old React code, I’ve come to the realisation that hooks are not great for abstraction. Yes I know you can create custom hooks but they don’t quite solve the issues I raise. I present some weak solutions in this article but ultimately, I think there needs to be more freedom on how and where hooks are used in the codebase.\n\nAlso, React plugin authors should stop making tools that only work with hooks. There are other ways to run things in Javascript.\n\nNote: This is 100% my opinion. I’m not a massive deal in the web dev world so don’t take what I say as gospel. Do what works best for your team and your project. Also, please read this article to the very end before forming an opinion.\n\n<b>What are hooks in React?</b>\nI really like the explanation of Hooks from JavaPoint. If you don’t like my explanation, I recommend reading theirs. I’m only going to do a bad job of rephrasing it anyway.\n\nBefore hooks, there were two ways to write React components with a class or with a function. Class components allowed you to use state and lifecycle methods, function components did not. This is where hooks come in.\n\nHooks are functions that make it possible to add state and lifecycle methods to function components. But they have some rules:\n\nThey can only be called on the top level of the component, so not in loops or nested functions\nHooks can only be called in a React function (function name starts with a capital letter, returns a JSX element, etc…) and nothing else. Not class components or regular Javascript functions.\nAlso, hooks themselves usually return the function that needs to be used, confusing right.\n\nYou’ll see more of this in some examples below but if I want to use a hook to say, redirect to a url. I’d have to run the hook first at the top-level which returns a function. Then run that returned function with an argument of the url I want to redirect to.\n\nNot super straight forward but that’s how just how hooks works.",
      "author": "Richard Oliver Bray"
    },
    {
      "id": 4,
      "title": "Top 10 Libraries You Should Know for React Native in 2022",
      "date": "19-FEB-2022",
      "category": "Reactjs",
      "ratings": "4.2",
      "image": "reactlib.jpg",
      "duration": "8 min",
      "storyline": "Hello everyone in this posting I’m going to make a top 10 of libraries you should know for react native that is of great help and I’ve already used them in several applications in the job market.\n\nThese top 10 are based on my choice and there are definitely other libraries that I should put here. Maybe one day I’ll make a top 25 or even more. So follow so you don’t miss out!\n\nI’ll try not to bring libraries that are always mentioned in top 10 posts, like react native maps that are in practically every post.\n\nThe list will also not be sorted in order of priority or from best to worst.\n\nIt is organized according to what came to my mind.\n\n<b>1. Victory Native</b>\nThis library is a complete solution for anyone who wants to use graphs in react native. The only requirement is to have the react-native-svg library installed.\n\nAs this library works with svg standards, it is extremely performant, making sure you don’t lose any quality and performance in the application, which is a fear for many people.\n\nFurthermore, this library has extensive documentation, which facilitates its learning and application. It also has integration for React.js, ie its learning curve to apply the concepts of the same library to the web is null.\n\n<b>Victory Native Gallery</b>\nhttps://formidable.com/open-source/victory/gallery\n\n<b>Documentation</b>\nhttps://formidable.com/open-source/victory/docs/native/\n\n<b>2. Modalize</b>\nLibrary for applying modals in React Native super performance and very intuitive and easy to apply. You who want to apply modals should certainly consider using this library that has good documentation and examples in its github for easy implementation.\n\n<b>Modalize Github</b>\nhttps://github.com/jeremybarbet/react-native-modalize\n\n<b>Documentation</b>\nhttps://jeremybarbet.github.io/react-native-modalize\n\n<b>3. React Hook Form</b>\nYou have certainly had or will have to deal with large forms, asking for name, age, email, password, password confirmation, country, state, neighborhood, etc. As the default is now to use hooks you would have a dozen lines with useState, which makes the code very messy and also reduces performance on weaker devices by causing multiple renderings.\n\nThat’s why the react hook form came up, it takes care of that for you and with each character typed it doesn’t render the application again.\n\nIt also has an extremely useful, performant validation strategy and native integration with Yup.\n\nWhenever you have to deal with forms in react native, now think about using this library. Once you’ve familiarized yourself with it, you probably won’t want to use another way to handle validations and forms.",
      "author": "Vinicius Petrachin"
    },
    {
      "id": 5,
      "title": "6 Algorithms Every Developer Should Know",
      "date": "17-Jan-2022",
      "category": "Programming",
      "ratings": "4",
      "image": "programming.jpg",
      "duration": "3 min",
      "storyline": "Hello, I am Richard. I am a developer, and you should know that I’m not a big fan of data structures and algorithms. If you can relate to this, don’t worry; after working on many projects (small and large), I discovered the six important algorithms that every developer should know, and these six will almost always solve every problem in your development process.\n\nWhat are those 6 significant algorithms?\n\n1. Sorting Algorithm:\nWhat exactly is sorting?- It is the algorithm that arranges the order of the items in a list.\n\nImportant Sorting Algorithms-\n\nBubble Sort: Bubble Sort is the most basic sorting algorithm, and it works by repeatedly swapping adjacent elements if they are out of order.\nMerge Sort: Merge sort is a sorting technique that uses the divide and conquer strategy.\nQuicksort: Quicksort is a popular sorting algorithm that performs n log n comparisons on average when sorting an array of n elements. It is a more efficient and faster sorting algorithm.\nHeap Sort: Heap sort works by visualizing the array elements as a special type of complete binary tree known as a heap.\n2. Searching Algorithm:\nWhat exactly is searching?- It is the algorithm that finds an element in a data set.\n\nImportant Searching Algorithms-\n\nBinary Search: Binary search employs the divide and conquer strategy, in which a sorted list is divided into two halves and the item is compared to the list’s middle element. If a match is found, the middle element’s location is returned.\nBreadth-First Search(BFS): Breadth-first search is a graph traversal algorithm that begins at the root node and explores all neighboring nodes.\nDepth-First Search(DFS): The depth-first search (DFS) algorithm begins with the first node of the graph and proceeds to go deeper and deeper until we find the goal node or node with no children.\n3. Dynamic Programming:\nDynamic Programming (DP) is an algorithmic technique for solving an optimization problem by breaking it down into simpler sub-problems and taking advantage of the fact that the optimal solution to the overall problem is dependent on the optimal solution to its sub-problems.\n\n4. Recursion Algorithm:\nRecursion is a problem-solving technique in which the solution is dependent on solutions to smaller instances of the same problem. Computing factorials is a classic example of recursive programming.\n\nEvery recursive program follows the same basic sequence of steps:\n\nSet up the algorithm. Recursive programs frequently require a seed value, to begin with. This is accomplished by either using a parameter passed to the function or by providing a non-recursive gateway function that sets up the seed values for the recursive calculation.\nCheck to see if the current value(s) being processed correspond to the base case. If so, process the value and return it.\nRephrase the solution in terms of a smaller or simpler sub-problem or sub-problems.\nApply the algorithm to the sub-problem.\nIn order to formulate an answer, combine the results.\nReturn the results.\n5. Divide and Conquer:\nA divide-and-conquer algorithm recursively divides a problem into two or more sub-problems of the same or related type, until they are simple enough to be solved directly.\n\nThe Divide and Conquer algorithm consists of a dispute using the three steps listed below.\n\nDivide the original problem into sub-problems.\nConquer: Solve each sub-problem one at a time, recursively.\nCombine: Put the solutions to the sub-problems together to get the solution to the whole problem.\n6. Hashing:\nHashing is a technique or process that uses a hash function to map keys and values into a hash table. It is done to allow for quicker access to elements. The efficiency of mapping is determined by the hash function’s efficiency.",
      "author": "Richard Warepam"
    }
  ],
  "interests": [
    {
      "id": 1,
      "topic" : "Sports",
      "image" :""
    },
   
    {
      "id": 2,
       "topic" : "Movies",
       "image" :""

    },
    {
      "id": 3,
       "topic" : "Science",
       "image" :""

    },
    {
      "id": 4,
       "topic" : "Medicine",
       "image" :""

    },
    {
      "id": 5,
       "topic" : "Artificial Intelligence",
       "image" :""

    },
    {
      "id": 6,
       "topic" : "Machine Learning",
       "image" :""

    },
    {
      "id": 7,
       "topic" : "Robotics",
       "image" :""

    }
  ],
  "public-articles": [
    {
      "id": 1,
      "title": "useAsync: A cleaner way to fetch data from APIs",
      "date": "01-Jun-2022",
      "category": "Reactjs",
      "ratings": "4.1",
      "image": "ACLEANERWAY.jpg",
      "duration": "7 min",
      "storyline": "Recently I was working on a project during my internship. I was given a fairly easy task, to build a new page where I had to fetch data from APIs and display it with some CTAs. There I came across a very interesting hook that was used across the project to carry out similar tasks.\n\n<b>useAsync</b>\n\nSome of you must have heard it before. I was fascinated by the fact that how clean and elegant it had become to handle declarative promise resolution and data fetching. I decided to build a custom hook of my own and re-invent the wheel to understand it better.",
      "author": "Varun Khalate"
    },
    {
      "id": 2,
      "title": "How to Become an Irreplaceable Front-end Talent in a Company",
      "date": "24-APR-2022",
      "category": "General",
      "ratings": "3.7",
      "image": "general.jpg",
      "duration": "4 min",
      "storyline": "In recent years, the front-end has developed very fast, and the prosperity of SPA has made front-end engineering more and more important. In many scenarios, the complexity and difficulty of the front end have already surpassed that of the back end. But with the rapid development, the front-end has gradually exposed many problems. As we all know, front-end practitioners rarely talk about program design principles or design ideas. This inevitably leads to the front-end code being written as spaghetti. Under the premise of the development model based on the MVVM-like framework, the front-end code naturally has component-level abstraction and is still written as spaghetti. If it is the MVC era of slash and burn, it is even more unimaginable.\n\nA front-end project in charge of a colleague frequently broke out bugs, and it has reached the level of repairing 1 bug to generate 3 bugs, and even many bugs cannot be located. I asked my colleagues why, and the answer is that the project is more complicated. Out of curiosity, I skimmed through the code for this project and found that this is typical spaghetti. Apart from the author himself, there should be no one who can or is willing to take over the project, the future destiny can only be to recruit a new person to refactor from 0, and even a line of code cannot be referenced.",
      "author": "Superbinary"
    },
    {
      "id": 3,
      "title": "Nutrition",
      "date": "01-NOV-2021",
      "category": "Health",
      "ratings": "3.8",
      "image": "health.jpg",
      "duration": "3 min",
      "storyline": "Nutrition is a critical part of health and development. Better nutrition is related to improved infant, child and maternal health, stronger immune systems, safer pregnancy and childbirth, lower risk of non-communicable diseases (such as diabetes and cardiovascular disease), and longevity.\n\nHealthy children learn better. People with adequate nutrition are more productive and can create opportunities to gradually break the cycles of poverty and hunger.\n\nMalnutrition, in every form, presents significant threats to human health. Today the world faces a double burden of malnutrition that includes both undernutrition and overweight, especially in low- and middle-income countries.\n\nWHO is providing scientific advice and decision-making tools that can help countries take action to address all forms of malnutrition to support health and wellbeing for all, at all ages.\n\nThis fact file explores the risks posed by all forms of malnutrition, starting from the earliest stages of development, and the responses that the health system can give directly and through its influence on other sectors, particularly the food system.",
      "author": "WHO"
    },
    {
      "id": 4,
      "title": "Skiing - A Popular Winter Sport",
      "date": "24-May-2022",
      "category": "Sports",
      "ratings": "4.5",
      "image": "Skiing.jpg",
      "duration": "6 min",
      "storyline": "Skiing is one of the most popular sports in the world. It is a way of moving over snow and and an activity that millions of people of all ages enjoy.\n \n<b>Types of Skiing</b>\nThere are three types of skiing: Alpine skiing, Nordic skiing and freestyle skiing.\n\n\n<b>Alpine Skiing</b>\nAlpine skiing is skiing down a hill. The word comes from the Alps, the highest mountains in Europe where downhill skiing started. Beginners slide down gentle slopes and keep the front tips of their skis together. This is called a snow plough.\nWhen you get better you ski parallel and keep your ankles together.For many years skis were made out of wood. Today modern carvers are made of a combination of different materials.\nThey have metal edges and are broader at the ends so that you can turn more easily. Generally, better skiers use longer skis because they keep steady at higher speeds. Safety bindings help prevent leg injuries. They separate you from the skis when you fall down.\nThe first boots were made out of leather. Today they have two parts. The outer shell is hard and gives skiers more protection, the inner boot is made up of foam or other materials and keeps your feet warm. Two ski poles are used to help you keep your balance.\nAlpine skiing is a very popular form of recreation in many countries. Millions enjoy it in the USA, Canada, many European countries and Japan.\nThere are thousands of ski areas all over the world. In America, Colorado is the most popular state for skiing with famous resorts like Vail and Aspen.\nEurope has some of the most luxurious and famous skiing areas including St. Moritz (Switzerland), Val d’Isere (France), Garmisch-Partenkirchen (Germany) , Kitzbühel and the Arlberg (Austria) and Sestriere (Italy).\n\n<b>Nordic Skiing</b>\n\nNordic skiing includes cross-country skiing and ski jumping. It is called Nordic because cross country skiing has been a way of getting around in Norway, Sweden and Finland for a long time.\nCross-country skiing is the most popular form of Nordic skiing. Skiers glide over flat or hilly areas, and along forest trails. The skiers move by thrusting their poles into the snow and striding forward. Cross-country skiing is a good exercise and strengthens your overall physical condition.\nThe skis are much lighter and narrower than alpine skis and do not have a metal edge. The poles are also longer than alpine poles because you use more thrust to move forward.\nSki jumping is a form of skiing for athletes. A skier glides down a steep track and flies off a platform at the end. Jumpers are judged on the distance of their jump and on their jumping style.\n\n<b>Free styling</b>\nFree styling is form of skiing in which skiers perform stunts, unusual or difficult moves. It became popular during the 1960s and 1970s. Today there are three main forms of free styling.\nIn ballet, the skiers ski down a slope and make jumps and spins on their way. In the aerial, skiers leap off a platform and perform spins and flips in the air before landing on the ground again. \nMogul skiing is skiing on large bumps as fast as you can.",
      "author": " Richard C. Drew"
    },
    {
      "id": 5,
      "title": "Why Facts Don’t Change Our Minds",
      "date": "15-Spe-2020",
      "category": "General",
      "ratings": "4.3",
      "image": "factsdontchangeourmind.jpg",
      "duration": "7 min",
      "storyline": "The economist J.K. Galbraith once wrote, Faced with a choice between changing one’s mind and proving there is no need to do so, almost everyone gets busy with the proof.\n\nLeo Tolstoy was even bolder: The most difficult subjects can be explained to the most slow-witted man if he has not formed any idea of them already; but the simplest thing cannot be made clear to the most intelligent man if he is firmly persuaded that he knows already, without a shadow of doubt, what is laid before him.\n\nWhat's going on here? Why don't facts change our minds? And why would someone continue to believe a wrong or inaccurate idea anyway? How do such behaviors serve us?\n\n\n<b>The Logic of False Beliefs</b>\n\nHumans need a reasonably accurate view of the world in order to survive. If your model of reality is wildly different from the actual world, then you struggle to take effective actions each day.\n\nHowever, truth and accuracy are not the only things that matter to the human mind. Humans also seem to have a deep desire to belong.\n\nIn Atomic Habits, I wrote, Humans are herd animals. We want to fit in, to bond with others, and to earn the respect and approval of our peers. Such inclinations are essential to our survival. For most of our evolutionary history, our ancestors lived in tribes. Becoming separated from the tribe—or worse, being cast out—was a death sentence.\n\nUnderstanding the truth of a situation is important, but so is remaining part of a tribe. While these two desires often work well together, they occasionally come into conflict.\n\nIn many circumstances, social connection is actually more helpful to your daily life than understanding the truth of a particular fact or idea. The Harvard psychologist Steven Pinker put it this way, People are embraced or condemned according to their beliefs, so one function of the mind may be to hold beliefs that bring the belief-holder the greatest number of allies, protectors, or disciples, rather than beliefs that are most likely to be right.\n\nWe don't always believe things because they are correct. Sometimes we believe things because they make us look good to the people we care about.\n\nI thought Kevin Simler put it well when he wrote, If a brain anticipates that it will be rewarded for adopting a particular belief, it's perfectly happy to do so, and doesn't much care where the reward comes from — whether it's pragmatic (better outcomes resulting from better decisions), social (better treatment from one's peers), or some mix of the two.\n\nFalse beliefs can be useful in a social sense even if they are not useful in a factual sense. For lack of a better phrase, we might call this approach factually wrong, but socially accurate. When we have to choose between the two, people often select friends and family over facts.\n\nThis insight not only explains why we might hold our tongue at a dinner party or look the other way when our parents say something offensive, but also reveals a better way to change the minds of others.",
      "author": "JAMES CLEAR"
    }
  ],
  "my-articles": [
    {
      "id": 1,
      "title": "useAsync: A cleaner way to fetch data from APIs",
      "date": "01-Jun-2022",
      "category": "Reactjs",
      "ratings": "4.1",
      "image": "ACLEANERWAY.jpg",
      "duration": "7 min",
      "storyline": "Recently I was working on a project during my internship. I was given a fairly easy task, to build a new page where I had to fetch data from APIs and display it with some CTAs. There I came across a very interesting hook that was used across the project to carry out similar tasks.\n\n<b>useAsync</b>\n\nSome of you must have heard it before. I was fascinated by the fact that how clean and elegant it had become to handle declarative promise resolution and data fetching. I decided to build a custom hook of my own and re-invent the wheel to understand it better.",
      "status": "Submitted"
    },
    {
      "id": 2,
      "title": "How to Become an Irreplaceable Front-end Talent in a Company",
      "date": "24-APR-2022",
      "category": "General",
      "ratings": "3.7",
      "image": "general.jpg",
      "duration": "4 min",
      "storyline": "In recent years, the front-end has developed very fast, and the prosperity of SPA has made front-end engineering more and more important. In many scenarios, the complexity and difficulty of the front end have already surpassed that of the back end. But with the rapid development, the front-end has gradually exposed many problems. As we all know, front-end practitioners rarely talk about program design principles or design ideas. This inevitably leads to the front-end code being written as spaghetti. Under the premise of the development model based on the MVVM-like framework, the front-end code naturally has component-level abstraction and is still written as spaghetti. If it is the MVC era of slash and burn, it is even more unimaginable.\n\nA front-end project in charge of a colleague frequently broke out bugs, and it has reached the level of repairing 1 bug to generate 3 bugs, and even many bugs cannot be located. I asked my colleagues why, and the answer is that the project is more complicated. Out of curiosity, I skimmed through the code for this project and found that this is typical spaghetti. Apart from the author himself, there should be no one who can or is willing to take over the project, the future destiny can only be to recruit a new person to refactor from 0, and even a line of code cannot be referenced.",
      "status": "In Review"
    },
    {
      "id": 3,
      "title": "Nutrition",
      "date": "01-NOV-2021",
      "category": "Health",
      "ratings": "3.8",
      "image": "health.jpg",
      "duration": "3 min",
      "storyline": "Nutrition is a critical part of health and development. Better nutrition is related to improved infant, child and maternal health, stronger immune systems, safer pregnancy and childbirth, lower risk of non-communicable diseases (such as diabetes and cardiovascular disease), and longevity.\n\nHealthy children learn better. People with adequate nutrition are more productive and can create opportunities to gradually break the cycles of poverty and hunger.\n\nMalnutrition, in every form, presents significant threats to human health. Today the world faces a double burden of malnutrition that includes both undernutrition and overweight, especially in low- and middle-income countries.\n\nWHO is providing scientific advice and decision-making tools that can help countries take action to address all forms of malnutrition to support health and wellbeing for all, at all ages.\n\nThis fact file explores the risks posed by all forms of malnutrition, starting from the earliest stages of development, and the responses that the health system can give directly and through its influence on other sectors, particularly the food system.",
      "status": "In-Review"
    },
    {
      "id": 4,
      "title": "Skiing - A Popular Winter Sport",
      "date": "24-May-2022",
      "category": "Sports",
      "ratings": "4.5",
      "image": "Skiing.jpg",
      "duration": "6 min",
      "storyline": "Skiing is one of the most popular sports in the world. It is a way of moving over snow and and an activity that millions of people of all ages enjoy.\n \n<b>Types of Skiing</b>\nThere are three types of skiing: Alpine skiing, Nordic skiing and freestyle skiing.\n\n\n<b>Alpine Skiing</b>\nAlpine skiing is skiing down a hill. The word comes from the Alps, the highest mountains in Europe where downhill skiing started. Beginners slide down gentle slopes and keep the front tips of their skis together. This is called a snow plough.\nWhen you get better you ski parallel and keep your ankles together.For many years skis were made out of wood. Today modern carvers are made of a combination of different materials.\nThey have metal edges and are broader at the ends so that you can turn more easily. Generally, better skiers use longer skis because they keep steady at higher speeds. Safety bindings help prevent leg injuries. They separate you from the skis when you fall down.\nThe first boots were made out of leather. Today they have two parts. The outer shell is hard and gives skiers more protection, the inner boot is made up of foam or other materials and keeps your feet warm. Two ski poles are used to help you keep your balance.\nAlpine skiing is a very popular form of recreation in many countries. Millions enjoy it in the USA, Canada, many European countries and Japan.\nThere are thousands of ski areas all over the world. In America, Colorado is the most popular state for skiing with famous resorts like Vail and Aspen.\nEurope has some of the most luxurious and famous skiing areas including St. Moritz (Switzerland), Val d’Isere (France), Garmisch-Partenkirchen (Germany) , Kitzbühel and the Arlberg (Austria) and Sestriere (Italy).\n\n<b>Nordic Skiing</b>\n\nNordic skiing includes cross-country skiing and ski jumping. It is called Nordic because cross country skiing has been a way of getting around in Norway, Sweden and Finland for a long time.\nCross-country skiing is the most popular form of Nordic skiing. Skiers glide over flat or hilly areas, and along forest trails. The skiers move by thrusting their poles into the snow and striding forward. Cross-country skiing is a good exercise and strengthens your overall physical condition.\nThe skis are much lighter and narrower than alpine skis and do not have a metal edge. The poles are also longer than alpine poles because you use more thrust to move forward.\nSki jumping is a form of skiing for athletes. A skier glides down a steep track and flies off a platform at the end. Jumpers are judged on the distance of their jump and on their jumping style.\n\n<b>Free styling</b>\nFree styling is form of skiing in which skiers perform stunts, unusual or difficult moves. It became popular during the 1960s and 1970s. Today there are three main forms of free styling.\nIn ballet, the skiers ski down a slope and make jumps and spins on their way. In the aerial, skiers leap off a platform and perform spins and flips in the air before landing on the ground again. \nMogul skiing is skiing on large bumps as fast as you can.",
      "status": "Rejected"
    }
  ],
  "favourite-articles": [
    {
      "id": 1,
      "title": "5 Javascript Clean Coding Patterns To Enhance your Code",
      "date": "03-May-2022",
      "category": "Reactjs",
      "ratings": "4.7",
      "image": "javascript.jpg",
      "duration": "5 min",
      "storyline": "Writing good reusable code can be difficult sometimes. Sometimes we may learn to code in different languages and stick to some limitations or patterns that make sense in that context.\n\nAlthough there is no right or wrong in coding without context, there are some simple ways of writing code that are more generic and can be applied to a lot of contexts, and create more readable, maintainable, and predictable code. Here are some of them:\n\n<b>1. Removing else’s from conditional handling</b>\nEver had a code structure like this, where you have two conditions and then have to handle different codes for each of them:\nWell, there’s a different way of dealing with this scenario, that can make things more simple to read.\nGenerally, you can always work on removing the ‘elses’ from your code. This makes your code easier to read and maintain. Also, if in this scenario, one condition is dependent on the other, the code can be further simplified, by removing the second if.\n\n<b>2. More declarative code with built-in functions</b>\n\nLet’s say you have an array of numbers and you want to sort them. A common implementation would be the following:\nThe implementation works, and sometimes you want to build your own implementations, however, in a simple scenario, you might want to use built-in functions for some reasons:\n\nThey make the code smaller, and smaller code tends to be more maintainable (not always true though);\nThey already use implementations that are more worked on, so can be faster, more secure, and known by other developers;\nThis way, using the array method sort from javascript ES6 the code can be greatly simplified and also improved the speed for bigger arrays.",
      "author": "Daniel Guedes"
    },
    {
      "id": 2,
      "title": "Indian Premier League",
      "date": "26-MAY-2022",
      "category": "Sports",
      "ratings": "4.4",
      "image": "ipl.jpg",
      "duration": "5 min",
      "storyline": "Indian Premier League (IPL), Indian professional Twenty20 (T20) cricket league established in 2008. The league, which is based on a round-robin group and knockout format, \nhas teams in major Indian cities.\n\nThe brainchild of the Board of Control for Cricket in India (BCCI), the IPL has developed into the most lucrative and most popular outlet for the game of cricket. \nMatches generally begin in late afternoon or evening so that at least a portion of them are played under floodlights at night to maximize the television audience for \nworldwide broadcasts. Initially, league matches were played on a home-and-away basis between all teams, but, with the planned expansion to 10 clubs (divided into two groups of five) \nin 2011, that format changed so that matches between some teams would be limited to a single encounter. The top four teams contest three play-off matches, \nwith one losing team being given a second chance to reach the final, a wrinkle aimed at maximizing potential television revenue. \nThe play-off portion of the tournament involves the four teams that finished at the top of the tables in a series of knockout games that allows one team that lost \nits first-round game a second chance to advance to the final match.\n\nImmensely popular in England, Australia, India, and many other British Commonwealth countries, the sport of cricket is a way of life for many people. \nThought to have originated as far back as the 13th century, cricket has a long history and a literacy all its own. This quiz highlights some of the more obscure and humorous \naspects of a game that is notoriously difficult to explain to the uninitiated. Test your knowledge and see how much you know about this historic sport.\nWith the advent of the IPL, almost overnight the world’s best cricketers—who had seldom made the kind of money earned by their counterparts in other professional \nsports—became millionaires. The owners of the IPL franchises, who included major companies, Bollywood film stars, and media moguls, bid for the best players in auctions \norganized by the league. At the outset of the IPL, the well-financed Mumbai Indians had the league’s biggest payroll, more than $100 million. \nIt cost the Chennai Super Kings $1.5 million to secure the services of Mahendra Dhoni in the initial auction for the 2008 season and the Kolkata Knight Riders $2.4 million \nto sign Gautam Gambhir, the opening batsman for the Indian national team, in the bidding for the 2011 season.\n\nThe eight founding franchises were the Mumbai Indians, the Chennai Super Kings, the Royal Challengers Bangalore, the Deccan Chargers (based in Hyderabad), \nthe Delhi Daredevils, the Punjab XI Kings (Mohali), the Kolkata Knight Riders, and the Rajasthan Royals (Jaipur). In late 2010 two franchises, Rajasthan and Punjab, \nwere expelled from the league by the BCCI for breeches of ownership policy, but they were later reinstated in time for the 2011 tournament.\nTwo new franchises, the Pune Warriors India and the Kochi Tuskers Kerala, joined the IPL for the 2011 tournament. The Kochi club played just one year before the BCCI terminated \nits contract. In 2013 the Deccan Chargers were replaced in the IPL by the Sunrisers Hyderabad.\n\nThe first tournament, held over 44 days in 2008, was won by the Rajasthan Royals, one of the smaller-market franchises, captained by Shane Warne, \nthe great Australian bowler. In the wake of the IPL’s success, other cricketing countries scrambled to grab some of the riches by forming their own domestic T20 leagues.",
      "author": " Andrew Longmore"
    },
    {
      "id": 3,
      "title": "React Hooks are bad for your code. Here’s why!",
      "date": "25-MAY-2022",
      "category": "Reactjs",
      "ratings": "4.4",
      "image": "hooksarebad.jpg",
      "duration": "8 min",
      "storyline": "I’ve recently developed a dislike for hooks after trying to refactor some old React code, I’ve come to the realisation that hooks are not great for abstraction. Yes I know you can create custom hooks but they don’t quite solve the issues I raise. I present some weak solutions in this article but ultimately, I think there needs to be more freedom on how and where hooks are used in the codebase.\n\nAlso, React plugin authors should stop making tools that only work with hooks. There are other ways to run things in Javascript.\n\nNote: This is 100% my opinion. I’m not a massive deal in the web dev world so don’t take what I say as gospel. Do what works best for your team and your project. Also, please read this article to the very end before forming an opinion.\n\n<b>What are hooks in React?</b>\nI really like the explanation of Hooks from JavaPoint. If you don’t like my explanation, I recommend reading theirs. I’m only going to do a bad job of rephrasing it anyway.\n\nBefore hooks, there were two ways to write React components with a class or with a function. Class components allowed you to use state and lifecycle methods, function components did not. This is where hooks come in.\n\nHooks are functions that make it possible to add state and lifecycle methods to function components. But they have some rules:\n\nThey can only be called on the top level of the component, so not in loops or nested functions\nHooks can only be called in a React function (function name starts with a capital letter, returns a JSX element, etc…) and nothing else. Not class components or regular Javascript functions.\nAlso, hooks themselves usually return the function that needs to be used, confusing right.\n\nYou’ll see more of this in some examples below but if I want to use a hook to say, redirect to a url. I’d have to run the hook first at the top-level which returns a function. Then run that returned function with an argument of the url I want to redirect to.\n\nNot super straight forward but that’s how just how hooks works.",
      "author": "Richard Oliver Bray"
    },
    {
      "id": 4,
      "title": "Top 10 Libraries You Should Know for React Native in 2022",
      "date": "19-FEB-2022",
      "category": "Reactjs",
      "ratings": "4.2",
      "image": "reactlib.jpg",
      "duration": "8 min",
      "storyline": "Hello everyone in this posting I’m going to make a top 10 of libraries you should know for react native that is of great help and I’ve already used them in several applications in the job market.\n\nThese top 10 are based on my choice and there are definitely other libraries that I should put here. Maybe one day I’ll make a top 25 or even more. So follow so you don’t miss out!\n\nI’ll try not to bring libraries that are always mentioned in top 10 posts, like react native maps that are in practically every post.\n\nThe list will also not be sorted in order of priority or from best to worst.\n\nIt is organized according to what came to my mind.\n\n<b>1. Victory Native</b>\nThis library is a complete solution for anyone who wants to use graphs in react native. The only requirement is to have the react-native-svg library installed.\n\nAs this library works with svg standards, it is extremely performant, making sure you don’t lose any quality and performance in the application, which is a fear for many people.\n\nFurthermore, this library has extensive documentation, which facilitates its learning and application. It also has integration for React.js, ie its learning curve to apply the concepts of the same library to the web is null.\n\n<b>Victory Native Gallery</b>\nhttps://formidable.com/open-source/victory/gallery\n\n<b>Documentation</b>\nhttps://formidable.com/open-source/victory/docs/native/\n\n<b>2. Modalize</b>\nLibrary for applying modals in React Native super performance and very intuitive and easy to apply. You who want to apply modals should certainly consider using this library that has good documentation and examples in its github for easy implementation.\n\n<b>Modalize Github</b>\nhttps://github.com/jeremybarbet/react-native-modalize\n\n<b>Documentation</b>\nhttps://jeremybarbet.github.io/react-native-modalize\n\n<b>3. React Hook Form</b>\nYou have certainly had or will have to deal with large forms, asking for name, age, email, password, password confirmation, country, state, neighborhood, etc. As the default is now to use hooks you would have a dozen lines with useState, which makes the code very messy and also reduces performance on weaker devices by causing multiple renderings.\n\nThat’s why the react hook form came up, it takes care of that for you and with each character typed it doesn’t render the application again.\n\nIt also has an extremely useful, performant validation strategy and native integration with Yup.\n\nWhenever you have to deal with forms in react native, now think about using this library. Once you’ve familiarized yourself with it, you probably won’t want to use another way to handle validations and forms.",
      "author": "Vinicius Petrachin"
    },
    {
      "id": 5,
      "title": "6 Algorithms Every Developer Should Know",
      "date": "17-Jan-2022",
      "category": "Programming",
      "ratings": "4",
      "image": "programming.jpg",
      "duration": "3 min",
      "storyline": "Hello, I am Richard. I am a developer, and you should know that I’m not a big fan of data structures and algorithms. If you can relate to this, don’t worry; after working on many projects (small and large), I discovered the six important algorithms that every developer should know, and these six will almost always solve every problem in your development process.\n\nWhat are those 6 significant algorithms?\n\n1. Sorting Algorithm:\nWhat exactly is sorting?- It is the algorithm that arranges the order of the items in a list.\n\nImportant Sorting Algorithms-\n\nBubble Sort: Bubble Sort is the most basic sorting algorithm, and it works by repeatedly swapping adjacent elements if they are out of order.\nMerge Sort: Merge sort is a sorting technique that uses the divide and conquer strategy.\nQuicksort: Quicksort is a popular sorting algorithm that performs n log n comparisons on average when sorting an array of n elements. It is a more efficient and faster sorting algorithm.\nHeap Sort: Heap sort works by visualizing the array elements as a special type of complete binary tree known as a heap.\n2. Searching Algorithm:\nWhat exactly is searching?- It is the algorithm that finds an element in a data set.\n\nImportant Searching Algorithms-\n\nBinary Search: Binary search employs the divide and conquer strategy, in which a sorted list is divided into two halves and the item is compared to the list’s middle element. If a match is found, the middle element’s location is returned.\nBreadth-First Search(BFS): Breadth-first search is a graph traversal algorithm that begins at the root node and explores all neighboring nodes.\nDepth-First Search(DFS): The depth-first search (DFS) algorithm begins with the first node of the graph and proceeds to go deeper and deeper until we find the goal node or node with no children.\n3. Dynamic Programming:\nDynamic Programming (DP) is an algorithmic technique for solving an optimization problem by breaking it down into simpler sub-problems and taking advantage of the fact that the optimal solution to the overall problem is dependent on the optimal solution to its sub-problems.\n\n4. Recursion Algorithm:\nRecursion is a problem-solving technique in which the solution is dependent on solutions to smaller instances of the same problem. Computing factorials is a classic example of recursive programming.\n\nEvery recursive program follows the same basic sequence of steps:\n\nSet up the algorithm. Recursive programs frequently require a seed value, to begin with. This is accomplished by either using a parameter passed to the function or by providing a non-recursive gateway function that sets up the seed values for the recursive calculation.\nCheck to see if the current value(s) being processed correspond to the base case. If so, process the value and return it.\nRephrase the solution in terms of a smaller or simpler sub-problem or sub-problems.\nApply the algorithm to the sub-problem.\nIn order to formulate an answer, combine the results.\nReturn the results.\n5. Divide and Conquer:\nA divide-and-conquer algorithm recursively divides a problem into two or more sub-problems of the same or related type, until they are simple enough to be solved directly.\n\nThe Divide and Conquer algorithm consists of a dispute using the three steps listed below.\n\nDivide the original problem into sub-problems.\nConquer: Solve each sub-problem one at a time, recursively.\nCombine: Put the solutions to the sub-problems together to get the solution to the whole problem.\n6. Hashing:\nHashing is a technique or process that uses a hash function to map keys and values into a hash table. It is done to allow for quicker access to elements. The efficiency of mapping is determined by the hash function’s efficiency.",
      "author": "Richard Warepam"
    }
  ],
  "trending-articles": [
    {
      "id": 1,
      "title": "5 Javascript Clean Coding Patterns To Enhance your Code",
      "date": "03-May-2022",
      "category": "Reactjs",
      "ratings": "4.7",
      "image": "javascript.jpg",
      "duration": "5 min",
      "storyline": "Writing good reusable code can be difficult sometimes. Sometimes we may learn to code in different languages and stick to some limitations or patterns that make sense in that context.\n\nAlthough there is no right or wrong in coding without context, there are some simple ways of writing code that are more generic and can be applied to a lot of contexts, and create more readable, maintainable, and predictable code. Here are some of them:\n\n<b>1. Removing else’s from conditional handling</b>\nEver had a code structure like this, where you have two conditions and then have to handle different codes for each of them:\nWell, there’s a different way of dealing with this scenario, that can make things more simple to read.\nGenerally, you can always work on removing the ‘elses’ from your code. This makes your code easier to read and maintain. Also, if in this scenario, one condition is dependent on the other, the code can be further simplified, by removing the second if.\n\n<b>2. More declarative code with built-in functions</b>\n\nLet’s say you have an array of numbers and you want to sort them. A common implementation would be the following:\nThe implementation works, and sometimes you want to build your own implementations, however, in a simple scenario, you might want to use built-in functions for some reasons:\n\nThey make the code smaller, and smaller code tends to be more maintainable (not always true though);\nThey already use implementations that are more worked on, so can be faster, more secure, and known by other developers;\nThis way, using the array method sort from javascript ES6 the code can be greatly simplified and also improved the speed for bigger arrays.",
      "author": "Daniel Guedes"
    },
    {
      "id": 2,
      "title": "Indian Premier League",
      "date": "26-MAY-2022",
      "category": "Sports",
      "ratings": "4.4",
      "image": "ipl.jpg",
      "duration": "5 min",
      "storyline": "Indian Premier League (IPL), Indian professional Twenty20 (T20) cricket league established in 2008. The league, which is based on a round-robin group and knockout format, \nhas teams in major Indian cities.\n\nThe brainchild of the Board of Control for Cricket in India (BCCI), the IPL has developed into the most lucrative and most popular outlet for the game of cricket. \nMatches generally begin in late afternoon or evening so that at least a portion of them are played under floodlights at night to maximize the television audience for \nworldwide broadcasts. Initially, league matches were played on a home-and-away basis between all teams, but, with the planned expansion to 10 clubs (divided into two groups of five) \nin 2011, that format changed so that matches between some teams would be limited to a single encounter. The top four teams contest three play-off matches, \nwith one losing team being given a second chance to reach the final, a wrinkle aimed at maximizing potential television revenue. \nThe play-off portion of the tournament involves the four teams that finished at the top of the tables in a series of knockout games that allows one team that lost \nits first-round game a second chance to advance to the final match.\n\nImmensely popular in England, Australia, India, and many other British Commonwealth countries, the sport of cricket is a way of life for many people. \nThought to have originated as far back as the 13th century, cricket has a long history and a literacy all its own. This quiz highlights some of the more obscure and humorous \naspects of a game that is notoriously difficult to explain to the uninitiated. Test your knowledge and see how much you know about this historic sport.\nWith the advent of the IPL, almost overnight the world’s best cricketers—who had seldom made the kind of money earned by their counterparts in other professional \nsports—became millionaires. The owners of the IPL franchises, who included major companies, Bollywood film stars, and media moguls, bid for the best players in auctions \norganized by the league. At the outset of the IPL, the well-financed Mumbai Indians had the league’s biggest payroll, more than $100 million. \nIt cost the Chennai Super Kings $1.5 million to secure the services of Mahendra Dhoni in the initial auction for the 2008 season and the Kolkata Knight Riders $2.4 million \nto sign Gautam Gambhir, the opening batsman for the Indian national team, in the bidding for the 2011 season.\n\nThe eight founding franchises were the Mumbai Indians, the Chennai Super Kings, the Royal Challengers Bangalore, the Deccan Chargers (based in Hyderabad), \nthe Delhi Daredevils, the Punjab XI Kings (Mohali), the Kolkata Knight Riders, and the Rajasthan Royals (Jaipur). In late 2010 two franchises, Rajasthan and Punjab, \nwere expelled from the league by the BCCI for breeches of ownership policy, but they were later reinstated in time for the 2011 tournament.\nTwo new franchises, the Pune Warriors India and the Kochi Tuskers Kerala, joined the IPL for the 2011 tournament. The Kochi club played just one year before the BCCI terminated \nits contract. In 2013 the Deccan Chargers were replaced in the IPL by the Sunrisers Hyderabad.\n\nThe first tournament, held over 44 days in 2008, was won by the Rajasthan Royals, one of the smaller-market franchises, captained by Shane Warne, \nthe great Australian bowler. In the wake of the IPL’s success, other cricketing countries scrambled to grab some of the riches by forming their own domestic T20 leagues.",
      "author": " Andrew Longmore"
    },
    {
      "id": 3,
      "title": "React Hooks are bad for your code. Here’s why!",
      "date": "25-MAY-2022",
      "category": "Reactjs",
      "ratings": "4.4",
      "image": "hooksarebad.jpg",
      "duration": "8 min",
      "storyline": "I’ve recently developed a dislike for hooks after trying to refactor some old React code, I’ve come to the realisation that hooks are not great for abstraction. Yes I know you can create custom hooks but they don’t quite solve the issues I raise. I present some weak solutions in this article but ultimately, I think there needs to be more freedom on how and where hooks are used in the codebase.\n\nAlso, React plugin authors should stop making tools that only work with hooks. There are other ways to run things in Javascript.\n\nNote: This is 100% my opinion. I’m not a massive deal in the web dev world so don’t take what I say as gospel. Do what works best for your team and your project. Also, please read this article to the very end before forming an opinion.\n\n<b>What are hooks in React?</b>\nI really like the explanation of Hooks from JavaPoint. If you don’t like my explanation, I recommend reading theirs. I’m only going to do a bad job of rephrasing it anyway.\n\nBefore hooks, there were two ways to write React components with a class or with a function. Class components allowed you to use state and lifecycle methods, function components did not. This is where hooks come in.\n\nHooks are functions that make it possible to add state and lifecycle methods to function components. But they have some rules:\n\nThey can only be called on the top level of the component, so not in loops or nested functions\nHooks can only be called in a React function (function name starts with a capital letter, returns a JSX element, etc…) and nothing else. Not class components or regular Javascript functions.\nAlso, hooks themselves usually return the function that needs to be used, confusing right.\n\nYou’ll see more of this in some examples below but if I want to use a hook to say, redirect to a url. I’d have to run the hook first at the top-level which returns a function. Then run that returned function with an argument of the url I want to redirect to.\n\nNot super straight forward but that’s how just how hooks works.",
      "author": "Richard Oliver Bray"
    },
    {
      "id": 4,
      "title": "Top 10 Libraries You Should Know for React Native in 2022",
      "date": "19-FEB-2022",
      "category": "Reactjs",
      "ratings": "4.2",
      "image": "reactlib.jpg",
      "duration": "8 min",
      "storyline": "Hello everyone in this posting I’m going to make a top 10 of libraries you should know for react native that is of great help and I’ve already used them in several applications in the job market.\n\nThese top 10 are based on my choice and there are definitely other libraries that I should put here. Maybe one day I’ll make a top 25 or even more. So follow so you don’t miss out!\n\nI’ll try not to bring libraries that are always mentioned in top 10 posts, like react native maps that are in practically every post.\n\nThe list will also not be sorted in order of priority or from best to worst.\n\nIt is organized according to what came to my mind.\n\n<b>1. Victory Native</b>\nThis library is a complete solution for anyone who wants to use graphs in react native. The only requirement is to have the react-native-svg library installed.\n\nAs this library works with svg standards, it is extremely performant, making sure you don’t lose any quality and performance in the application, which is a fear for many people.\n\nFurthermore, this library has extensive documentation, which facilitates its learning and application. It also has integration for React.js, ie its learning curve to apply the concepts of the same library to the web is null.\n\n<b>Victory Native Gallery</b>\nhttps://formidable.com/open-source/victory/gallery\n\n<b>Documentation</b>\nhttps://formidable.com/open-source/victory/docs/native/\n\n<b>2. Modalize</b>\nLibrary for applying modals in React Native super performance and very intuitive and easy to apply. You who want to apply modals should certainly consider using this library that has good documentation and examples in its github for easy implementation.\n\n<b>Modalize Github</b>\nhttps://github.com/jeremybarbet/react-native-modalize\n\n<b>Documentation</b>\nhttps://jeremybarbet.github.io/react-native-modalize\n\n<b>3. React Hook Form</b>\nYou have certainly had or will have to deal with large forms, asking for name, age, email, password, password confirmation, country, state, neighborhood, etc. As the default is now to use hooks you would have a dozen lines with useState, which makes the code very messy and also reduces performance on weaker devices by causing multiple renderings.\n\nThat’s why the react hook form came up, it takes care of that for you and with each character typed it doesn’t render the application again.\n\nIt also has an extremely useful, performant validation strategy and native integration with Yup.\n\nWhenever you have to deal with forms in react native, now think about using this library. Once you’ve familiarized yourself with it, you probably won’t want to use another way to handle validations and forms.",
      "author": "Vinicius Petrachin"
    },
    {
      "id": 5,
      "title": "6 Algorithms Every Developer Should Know",
      "date": "17-Jan-2022",
      "category": "Programming",
      "ratings": "4",
      "image": "programming.jpg",
      "duration": "3 min",
      "storyline": "Hello, I am Richard. I am a developer, and you should know that I’m not a big fan of data structures and algorithms. If you can relate to this, don’t worry; after working on many projects (small and large), I discovered the six important algorithms that every developer should know, and these six will almost always solve every problem in your development process.\n\nWhat are those 6 significant algorithms?\n\n1. Sorting Algorithm:\nWhat exactly is sorting?- It is the algorithm that arranges the order of the items in a list.\n\nImportant Sorting Algorithms-\n\nBubble Sort: Bubble Sort is the most basic sorting algorithm, and it works by repeatedly swapping adjacent elements if they are out of order.\nMerge Sort: Merge sort is a sorting technique that uses the divide and conquer strategy.\nQuicksort: Quicksort is a popular sorting algorithm that performs n log n comparisons on average when sorting an array of n elements. It is a more efficient and faster sorting algorithm.\nHeap Sort: Heap sort works by visualizing the array elements as a special type of complete binary tree known as a heap.\n2. Searching Algorithm:\nWhat exactly is searching?- It is the algorithm that finds an element in a data set.\n\nImportant Searching Algorithms-\n\nBinary Search: Binary search employs the divide and conquer strategy, in which a sorted list is divided into two halves and the item is compared to the list’s middle element. If a match is found, the middle element’s location is returned.\nBreadth-First Search(BFS): Breadth-first search is a graph traversal algorithm that begins at the root node and explores all neighboring nodes.\nDepth-First Search(DFS): The depth-first search (DFS) algorithm begins with the first node of the graph and proceeds to go deeper and deeper until we find the goal node or node with no children.\n3. Dynamic Programming:\nDynamic Programming (DP) is an algorithmic technique for solving an optimization problem by breaking it down into simpler sub-problems and taking advantage of the fact that the optimal solution to the overall problem is dependent on the optimal solution to its sub-problems.\n\n4. Recursion Algorithm:\nRecursion is a problem-solving technique in which the solution is dependent on solutions to smaller instances of the same problem. Computing factorials is a classic example of recursive programming.\n\nEvery recursive program follows the same basic sequence of steps:\n\nSet up the algorithm. Recursive programs frequently require a seed value, to begin with. This is accomplished by either using a parameter passed to the function or by providing a non-recursive gateway function that sets up the seed values for the recursive calculation.\nCheck to see if the current value(s) being processed correspond to the base case. If so, process the value and return it.\nRephrase the solution in terms of a smaller or simpler sub-problem or sub-problems.\nApply the algorithm to the sub-problem.\nIn order to formulate an answer, combine the results.\nReturn the results.\n5. Divide and Conquer:\nA divide-and-conquer algorithm recursively divides a problem into two or more sub-problems of the same or related type, until they are simple enough to be solved directly.\n\nThe Divide and Conquer algorithm consists of a dispute using the three steps listed below.\n\nDivide the original problem into sub-problems.\nConquer: Solve each sub-problem one at a time, recursively.\nCombine: Put the solutions to the sub-problems together to get the solution to the whole problem.\n6. Hashing:\nHashing is a technique or process that uses a hash function to map keys and values into a hash table. It is done to allow for quicker access to elements. The efficiency of mapping is determined by the hash function’s efficiency.",
      "author": "Richard Warepam"
    }
  ],

  
  "subscription_details" : 
  [
    {
    "username": "user1",
    "registeredemail" : "user1@gmail.com",
    "subscriptiontype" : "monthly",
    "expirydata" : "10-10-2022"
    }
  ]
}